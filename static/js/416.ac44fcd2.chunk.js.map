{"version":3,"file":"static/js/416.ac44fcd2.chunk.js","mappings":"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","sources":["modules/MyContacts/FormAddCohntacts/Form.styled.js","redux/selectors.js","modules/MyContacts/ContactList/ContactList.styled.js","modules/MyContacts/ContactList/ContactList.jsx","modules/MyContacts/Filter/Filter.styled.js","modules/MyContacts/Filter/Filter.jsx","modules/MyContacts/FormAddCohntacts/Form.jsx","modules/MyContacts/MyContacts.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from \"styled-components\"\nimport { Form, Field } from \"formik\"\n\n\nexport const FormStyled = styled(Form)`\nmargin: 10px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 400px;\n    height: 300px;\n    background-color: rgb(0 31 49);\n    border-radius: 10px;\n    box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset,rgba(44, 187, 99, .15) 0 1px 2px,rgba(44, 187, 99, .15) 0 2px 4px,rgba(44, 187, 99, .15) 0 4px 8px,rgba(44, 187, 99, .15) 0 8px 16px,rgba(44, 187, 99, .15) 0 16px 32px;\n    color: #fff;\n`\nexport const FieldStyled = styled(Field)`\n    color: #150000;\n    font-size: 20px;\n    font-weight: 500;\n    border-radius: 5px; \n    background-color: #e3f3f8;\n`\nexport const Button = styled.button`\n    width: 200px;\n    background-color: #c2fbd7;\n    border-radius: 100px;\n    box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset,rgba(44, 187, 99, .15) 0 1px 2px,rgba(44, 187, 99, .15) 0 2px 4px,rgba(44, 187, 99, .15) 0 4px 8px,rgba(44, 187, 99, .15) 0 8px 16px,rgba(44, 187, 99, .15) 0 16px 32px;\n    color: rgb(19 7 69);\n    display: inline-block;\n    padding: 8px 20px;\n    margin: 10px 15px;\n    text-align: center;\n    text-decoration: none;\n    transition: all 250ms;\n    border: 0;\n    font-size: 15px;\n    font-weight: 700;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n        &:hover {\n            box-shadow: rgba(44,187,99,.35) 0 -25px 18px -14px inset,rgba(44,187,99,.25) 0 1px 2px,rgba(44,187,99,.25) 0 2px 4px,rgba(44,187,99,.25) 0 4px 8px,rgba(44,187,99,.25) 0 8px 16px,rgba(44,187,99,.25) 0 16px 32px;\n            transform: scale(1.05) rotate(-1deg);\n}\n`\n\nexport const Label = styled.label`\nfont-size: 20px;\nfont-weight: 700;\n`\n\n","export const getContacts = ({contacts}) => contacts.items;\n\nexport const getFilter = ({contacts}) => contacts.filter;\n\nexport const getFilteredContacts = (({contacts, filter}) => {\n    const filterNormal = filter.toLowerCase();\n    const result = contacts.items.filter(({name}) => {\n        const normalizedName = name.toLowerCase();\n        return normalizedName.includes(filterNormal)\n    })\n    return result;\n});","import styled from \"styled-components\"\n\nexport const Button = styled.button`\n    width: 80px;\n    background-color: #c2fbd7;\n    border-radius: 100px;\n    box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset,rgba(44, 187, 99, .15) 0 1px 2px,rgba(44, 187, 99, .15) 0 2px 4px,rgba(44, 187, 99, .15) 0 4px 8px,rgba(44, 187, 99, .15) 0 8px 16px,rgba(44, 187, 99, .15) 0 16px 32px;\n    color: rgb(19 7 69);\n    cursor: pointer;\n    display: inline-block;\n    /* font-family: 'Yanone Kaffeesatz', sans-serif; */\n    padding: 8px 20px;\n    margin: 10px 15px;\n    text-align: center;\n    text-decoration: inherit;\n    transition: all 250ms;\n    border: 0;\n    font-size: 11px;\n    font-weight: 500;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n        &:hover {\n            box-shadow: rgba(44,187,99,.35) 0 -25px 18px -14px inset,rgba(44,187,99,.25) 0 1px 2px,rgba(44,187,99,.25) 0 2px 4px,rgba(44,187,99,.25) 0 4px 8px,rgba(44,187,99,.25) 0 8px 16px,rgba(44,187,99,.25) 0 16px 32px;\n            transform: scale(1.05) rotate(-1deg);\n}\n`","import React, {memo} from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './ContactList.styled';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  const elements = contacts.map(({ id, name, phone, createdAt }) => \n    (<li key={id}>\n        <p>{name}</p>\n        <p>{phone}</p>\n        <Button type='button' onClick={() => onDeleteContact(id)}>Delete</Button>\n    </li>)); \n\n  return (\n    <ol>\n      {elements}\n    </ol>\n    )\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.exact({\n    id:PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone:PropTypes.string.isRequired,\n    createdAt: PropTypes.string,\n    })),\n  onDeleteContact:PropTypes.func\n}\n\nexport default memo(ContactList);","import styled from \"styled-components\"\n\nexport const Label = styled.label`\n    font-size: 22px;\n    font-weight: 500;\n`\nexport const Input = styled.input`\n    padding: 0 10px;\n    margin: 0 20px;\n    color: #150000;\n    font-size: 20px;\n    font-weight: 400;\n    border-radius: 5px; \n    &:hover, &:focus{\n        box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset,rgba(44, 187, 99, .15) 0 1px 2px,rgba(44, 187, 99, .15) 0 2px 4px,rgba(44, 187, 99, .15) 0 4px 8px,rgba(44, 187, 99, .15) 0 8px 16px,rgba(44, 187, 99, .15) 0 16px 32px;\n    }\n`","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter} from 'redux/selectors';\nimport { filterContacts } from 'redux/filter/filter-action';\n\nconst Filter = () => {\n    const filter = useSelector(getFilter);\n\n    const dispatch = useDispatch();\n\n    const onFilterContacts = ({target}) =>{\n        dispatch(filterContacts(target.value))\n    }\n    \n    return (\n        <Label htmlFor=\"filter\">\n            Find contacts by name \n            <Input type=\"text\" name=\"filter\" onChange={onFilterContacts} value={filter} />\n        </Label>\n    )\n}\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n};\n\nexport default Filter;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik} from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { FormStyled, FieldStyled, Button, Label } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { fetchContacts, addContacts} from 'redux/contacts/contacts-operations';\nconst id = nanoid(5);\n\nconst SignupSchema = Yup.object().shape({\nname: Yup.string()\n    .min(2, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Please enter a name')\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must be only letters\"),\nphone: Yup.string()\n    .min(5, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Please enter a number')\n    .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Must be only digits\"),\n});\n\nconst ContactForm  = () => {\n    const contacts = useSelector(getContacts);\n\n    const dispatch = useDispatch();\n        \n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    const onAddContact = (payload, { resetForm }) => {\n        dispatch(addContacts(payload));\n        \n        resetForm();\n\n        return contacts;\n    } \n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                phone: '',\n            }}\n            validationSchema={SignupSchema}\n            onSubmit={onAddContact}\n    >\n\n    {({ errors, touched }) => (\n        <FormStyled>\n        <Label htmlFor=\"name\">Name</Label>\n        <FieldStyled\n            id={id}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"enter name\"/>\n        {errors.name && touched.name ? (\n            <div>{errors.name}</div>\n        ) : null}\n        \n        <Label htmlFor=\"phone\">Phone</Label>\n        <FieldStyled\n            id={id}\n            type=\"phone\"\n            name=\"phone\"\n            placeholder=\"enter number\" />\n        {errors.phone && touched.phone ? (\n            <div>{errors.phone}</div>\n        ) : null}\n        \n        <Button type=\"submit\">Add contact</Button>\n        </FormStyled>\n    )}\n    </Formik>\n    )\n};\n\nContactForm.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object,\n    onSubmit:PropTypes.func,\n}\n\nexport default ContactForm;","import { useDispatch, useSelector } from \"react-redux\";\nimport { getFilter, getFilteredContacts } from \"redux/selectors\";\nimport { removeContacts } from \"redux/contacts/contacts-operations\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport ContactForm from \"./FormAddCohntacts/Form\";\n\n\nconst MyContacts = () => {\n    const contacts = useSelector(getFilteredContacts);\nconst filter = useSelector(getFilter);\n\nconst dispatch = useDispatch();\n\nconst deleteContact =(payload) => {\n    dispatch(removeContacts(payload));\n  } \n\n    return (\n        <>\n            <div>\n                <h1>Phonebook</h1>\n                <ContactForm/>\n            </div>\n            <div>\n                <h2>Contacts</h2>\n                <Filter filter={filter}/>\n                <ContactList contacts={contacts} onDeleteContact={deleteContact}/>\n            </div>\n        </>\n    );\n}\n\nexport default MyContacts;","import MyContacts from \"modules/MyContacts/MyContacts\";\n\nconst ContactsPage = () => {\n    return (\n        <MyContacts/>\n    );\n}\n\nexport default ContactsPage;"],"names":["FormStyled","styled","Form","FieldStyled","Field","Button","Label","getContacts","contacts","items","getFilter","filter","getFilteredContacts","filterNormal","toLowerCase","name","includes","ContactList","onDeleteContact","elements","map","id","phone","createdAt","type","onClick","memo","Input","useSelector","dispatch","useDispatch","htmlFor","onChange","target","filterContacts","value","nanoid","SignupSchema","Yup","shape","min","max","required","matches","useEffect","fetchContacts","initialValues","validationSchema","onSubmit","payload","resetForm","addContacts","errors","touched","placeholder","removeContacts"],"sourceRoot":""}
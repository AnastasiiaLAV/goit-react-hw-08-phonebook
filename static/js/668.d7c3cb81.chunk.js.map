{"version":3,"file":"static/js/668.d7c3cb81.chunk.js","mappings":"+RAIaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,ghBAcVE,GAAcF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,oJAOXI,EAASJ,EAAAA,GAAAA,OAAH,q8BAwBNK,EAAQL,EAAAA,GAAAA,MAAH,4D,kICjDLM,EAAc,CACvBC,KAAM,GACNC,MAAO,GACPC,SAAU,I,6BCSRC,GAAKC,EAAAA,EAAAA,IAAO,GAEZC,EAAeC,EAAAA,KAAaC,MAAM,CACxCP,KAAMM,EAAAA,KACDE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,uBACTC,QAAQ,yHAA8D,wBAC3EV,MAAOK,EAAAA,KACFE,IAAI,EAAG,cACPC,IAAI,IAAK,aACTC,SAAS,yBACTT,QACLC,SAAUI,EAAAA,KACLE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,6BAiEd,EA9DsB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MAQjB,OACI,SAAC,KAAD,CACIC,cAAef,EACfgB,iBAAkBV,EAClBW,SAVW,SAACC,EAAD,GAA6B,IAAjBC,EAAgB,EAAhBA,UAC3BC,EAAAA,OAAAA,QAAA,kCAA0CF,EAAQjB,KAAKoB,cAAvD,OACAR,GAASS,EAAAA,EAAAA,IAAWJ,IACpBC,GACH,EAGG,SAMH,gBAAGI,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACG,UAAC,KAAD,YACA,SAAC,KAAD,CAAOC,QAAQ,OAAf,mBACA,SAAC,KAAD,CACIrB,GAAIA,EACJsB,KAAK,OACLzB,KAAK,OACL0B,YAAY,eACfJ,EAAOtB,MAAQuB,EAAQvB,MACpB,yBAAMsB,EAAOtB,OACb,MAEJ,SAAC,KAAD,CAAOwB,QAAQ,QAAf,oBACA,SAAC,KAAD,CACIrB,GAAIA,EACJsB,KAAK,QACLzB,KAAK,QACL0B,YAAY,cACZC,aAAa,OAEhBL,EAAOrB,OAASsB,EAAQtB,OACrB,yBAAMqB,EAAOrB,QACb,MAEJ,SAAC,KAAD,CAAOuB,QAAQ,WAAf,uBACA,SAAC,KAAD,CACIrB,GAAIA,EACJsB,KAAK,WACLzB,KAAK,WACL0B,YAAY,mBACfJ,EAAOpB,UAAYqB,EAAQrB,UACxB,yBAAMoB,EAAOpB,WACb,MACJ,SAAC,KAAD,CAAQuB,KAAK,SAAb,wBAjCH,GAsCJ,E,UCtED,EAXqB,WACjB,OAA0BG,EAAAA,EAAAA,IAAYC,EAAAA,IAA/BC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAEf,OACI,iCACA,SAAC,EAAD,IACCD,IAAU,cAAGE,MAAO,CAACC,MAAO,WAAlB,SAA+BF,MAGjD,C","sources":["modules/MyContacts/FormAddCohntacts/Form.styled.js","modules/RegisterForm/initislState.js","modules/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from \"styled-components\"\nimport { Form, Field } from \"formik\"\n\n\nexport const FormStyled = styled(Form)`\nmargin: 10px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 400px;\n    height: 300px;\n    background-color: rgb(0 31 49);\n    border-radius: 10px;\n    box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset,rgba(44, 187, 99, .15) 0 1px 2px,rgba(44, 187, 99, .15) 0 2px 4px,rgba(44, 187, 99, .15) 0 4px 8px,rgba(44, 187, 99, .15) 0 8px 16px,rgba(44, 187, 99, .15) 0 16px 32px;\n    color: #fff;\n`\nexport const FieldStyled = styled(Field)`\n    color: #150000;\n    font-size: 20px;\n    font-weight: 500;\n    border-radius: 5px; \n    background-color: #e3f3f8;\n`\nexport const Button = styled.button`\n    width: 200px;\n    background-color: #c2fbd7;\n    border-radius: 100px;\n    box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset,rgba(44, 187, 99, .15) 0 1px 2px,rgba(44, 187, 99, .15) 0 2px 4px,rgba(44, 187, 99, .15) 0 4px 8px,rgba(44, 187, 99, .15) 0 8px 16px,rgba(44, 187, 99, .15) 0 16px 32px;\n    color: rgb(19 7 69);\n    display: inline-block;\n    padding: 8px 20px;\n    margin: 10px 15px;\n    text-align: center;\n    text-decoration: none;\n    transition: all 250ms;\n    border: 0;\n    font-size: 15px;\n    font-weight: 700;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n        &:hover {\n            box-shadow: rgba(44,187,99,.35) 0 -25px 18px -14px inset,rgba(44,187,99,.25) 0 1px 2px,rgba(44,187,99,.25) 0 2px 4px,rgba(44,187,99,.25) 0 4px 8px,rgba(44,187,99,.25) 0 8px 16px,rgba(44,187,99,.25) 0 16px 32px;\n            transform: scale(1.05) rotate(-1deg);\n}\n`\n\nexport const Label = styled.label`\nfont-size: 20px;\nfont-weight: 700;\n`\n\n","export const InitialState ={\n    name: \"\",\n    email: \"\",\n    password: \"\",\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik} from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { FormStyled, FieldStyled, Button, Label } from '../MyContacts/FormAddCohntacts/Form.styled';\nimport { useDispatch } from 'react-redux';\nimport { InitialState } from './initislState';\nimport { singupUser } from 'redux/auth/auth-operations';\nimport { Notify } from 'notiflix';\n\n\nconst id = nanoid(5);\n\nconst SignupSchema = Yup.object().shape({\nname: Yup.string()\n    .min(2, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Please enter a name')\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must be only letters\"),\nemail: Yup.string()\n    .min(5, 'Too Short!')\n    .max(200, 'Too Long!')\n    .required('Please enter an email')\n    .email(),\npassword: Yup.string()\n    .min(3, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Please enter a password'),\n});\n\nconst RegisterForm  = () => {\n    const dispatch = useDispatch();\n    \n    const onRegister = (payload, { resetForm }) => {\n        Notify.success(`\"I salute you earthling ${payload.name.toUpperCase()}!\"`);\n        dispatch(singupUser(payload));\n        resetForm();\n    } \n\n    return (\n        <Formik\n            initialValues={InitialState}\n            validationSchema={SignupSchema}\n            onSubmit={onRegister}\n        >\n\n    {({ errors, touched }) => (\n        <FormStyled>\n        <Label htmlFor=\"name\">Name</Label>\n        <FieldStyled\n            id={id}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"enter name\"/>\n        {errors.name && touched.name ? (\n            <div>{errors.name}</div>\n        ) : null}\n        \n        <Label htmlFor=\"email\">Email</Label>\n        <FieldStyled\n            id={id}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"enter email\"\n            autoComplete=\"on\"\n            />\n        {errors.email && touched.email ? (\n            <div>{errors.email}</div>\n        ) : null}\n        \n        <Label htmlFor=\"password\">Password</Label>\n        <FieldStyled\n            id={id}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"enter password\" />\n        {errors.password && touched.password ? (\n            <div>{errors.password}</div>\n        ) : null}\n        <Button type=\"submit\">Register</Button>\n        </FormStyled>\n    )}\n    </Formik>\n    )\n};\n\nRegisterForm.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object,\n    onSubmit:PropTypes.func,\n}\n\nexport default RegisterForm;","import RegisterForm from \"modules/RegisterForm/RegisterForm\";\nimport { useSelector } from \"react-redux\";\nimport { getAuthError} from \"redux/selectors\";\n\nconst RegisterPage = () => {\n    const {status, message} = useSelector(getAuthError);\n        \n    return (\n        <>\n        <RegisterForm/>\n        {status && <p style={{color: \"#eb1052\"}}>{message}</p>}\n        </>\n    );\n}\n\nexport default RegisterPage;"],"names":["FormStyled","styled","Form","FieldStyled","Field","Button","Label","InitialState","name","email","password","id","nanoid","SignupSchema","Yup","shape","min","max","required","matches","dispatch","useDispatch","initialValues","validationSchema","onSubmit","payload","resetForm","Notify","toUpperCase","singupUser","errors","touched","htmlFor","type","placeholder","autoComplete","useSelector","getAuthError","status","message","style","color"],"sourceRoot":""}